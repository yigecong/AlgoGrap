第三章 递归

本章目标
1.学习递归
2.学习如何区分基线条件和递归条件



递归
1. 递归只是让解决问题的方案更加清晰，并没有性能上的优势
2. 名言——如果使用循环，程序的性能可能更高；如果使用递归，程序可能更加容易理解。



基线/递归条件
1. 目的：编写递归函数时，必须告诉它何时停止递归。
2. 递归函数分为两部分：递归条件和基线条件。
3. 递归条件指函数自己调用自己
4. 基线条件指的函数不再调用自己，从而避免无线循环。



栈
1. 例子：代办事项的例子，插入待办事项的最前面；读取待办事项时，你只读取最上面的，并将其删除。
2. 待办事项的两种操作：压入（插入）和弹出（读取并删除）
3. 以上例子所呈现的结构，即为栈。
4. 栈是一种简单的数据结构。



调用栈
1. 计算机内部使用的栈被称为调用栈。用于存储多高函数的变量，被称为调用栈。
2. 调用另一个函数时，当前函数暂停并处于未完成状态。该函数的所有的变量，都还在内存中。
3. 使用栈的代价。存储详尽的信息可能占用大量的内存。每一个函数都要占用一定的内存，如果栈高了，就意味着计算机存储了大量函数调用的信息。

